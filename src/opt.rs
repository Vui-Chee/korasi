use clap::{Parser, Subcommand};

use crate::ec2::GLOBAL_TAG_FILTER;

#[derive(Debug, Parser)]
#[command(version, arg_required_else_help = true)]
pub struct Opt {
    /// AWS credentials profile to use (set in ~/.aws/credentials).
    #[structopt(short, long, default_value = "default")]
    pub profile: String,

    /// Select region where ec2 instance is located.
    #[structopt(short, long, default_value = "ap-southeast-1")]
    pub region: String,

    /// Configure common tag for all resources generated by this tool.
    #[structopt(short, long, default_value = GLOBAL_TAG_FILTER)]
    pub tag: Option<String>,

    /// Enable to show logs.
    #[structopt(short, default_value_t = false)]
    pub debug: bool,

    /// Specify path to launch script.
    #[structopt(long, default_value = "start_up.sh")]
    pub setup: String,

    /// Path to SSH private key (default Ed25519).
    /// Default path is set to $HOME/.ssh/{pk}.
    ///
    /// For now, other key types are not handled at the moment.
    #[structopt(short, long)]
    pub ssh_key: Option<String>,

    #[command(subcommand)]
    pub commands: Commands,
}

#[derive(Debug, Subcommand)]
pub enum Commands {
    /// Create new instance, and print out SSH link.
    ///
    /// If not machine_type is specified, allow user to
    /// choose machine_type from list of options.
    Create { ami_id: String },

    /// List all instances created by this tool, which is under
    /// the same tag.
    #[clap(alias = "ls")]
    List,

    /// Delete 1 or more instances, where all options are displayed
    /// using a multi-select input.
    Delete {
        #[arg(long, short, default_value_t = false)]
        wait: bool,
    },

    /// Start 1 or more instances.
    ///
    /// Starting a stopped instance without an EIP will
    /// result in a new IP being assigned.
    Start,

    /// Stop 1 or more instances.
    Stop {
        #[arg(long, short)]
        wait: bool,
    },

    /// Upload local file(s) or directory to remote target instance.
    ///
    /// Uses SFTP that rides on top of SSH to transfer files.
    Upload {
        /// Local relative/absolute path to file(s) or directory.
        ///
        /// If no `src` is specified, then files within with current
        /// working directory will be uploaded to $HOME of remote.
        #[arg(index = 1)]
        src: Option<String>,

        /// Destination folder path on remote instance to upload files to.
        ///
        /// Destination folder(s) must exist, otherwise you have to manually
        /// create them using the `run` subcommand.
        ///
        /// If no dst is specified, files will be uploaded the $HOME/root
        /// directory of remote. Root folder will be auto-created.
        #[arg(index = 2)]
        dst: Option<String>,

        #[arg(short, long, default_value = "ubuntu")]
        user: String,
    },

    /// Executes a given command on remote instance.
    ///
    /// Only run commands that are non-blocking. Commands like
    /// opening `vi` does not working at the moment.
    ///
    /// TODO: run cmd from target directory.
    #[clap(alias = "r")]
    Run {
        #[arg(allow_hyphen_values = true, num_args = 1..)]
        command: Vec<String>,
    },

    /// SSH into instance.
    ///
    /// Executes default `bash` shell.
    #[clap(alias = "sh")]
    Shell {
        #[arg(short, long, default_value = "ubuntu")]
        user: String,
    },

    /// Terminate all resources deployed by tool.
    /// Does not remove AWS iAM permissions.
    ///
    /// Yugi: "I have assembled all the 5 pieces of Exodia. Exodia obliterate!"
    Obliterate,
}
